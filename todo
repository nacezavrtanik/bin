#!/bin/bash

options=(
    -d --delete
    -h --help
	-l --list
    -n --new
    -o --open
    -r --rename
    -s --show
)

invalid_syntax=1
name_doesnt_exist=11
name_already_exists=12
name_not_alphanumeric=13


usage() {
    cat << EOF
Usage: todo [OPTION] [NAME] [NAME2]
Manage TODOs.

Options:
  -d, --delete    delete TODO with name NAME
  -h, --help      display this help and exit
  -l, --list      list all TODOs
  -n, --new       create new TODO with name NAME
  -o, --open      open TODO with name NAME in Vim;
                    this is the default option if OPTION is not specified;
                    if NAME is not specified, the default TODO is opened
  -r, --rename    rename TODO with name NAME to TODO with name NAME2
  -s, --show      show TODO with name NAME in the terminal;
                    if NAME is not specified, the default TODO is shown

Exit status:
  0     everything OK,
  1     invalid syntax,
  11    name does not exist,
  12    name already exists,
  13    name is not alphanumeric.
EOF
}

delete() {
    if ! [ -f "$1.md" ]; then
        echo "ERROR: Name *$1* does not exist ..."
        return "$name_doesnt_exist"
    fi

    rm "$1.md"
    echo "Deleted *$1*!"
}

list() {
    ls -1 |
        grep '.md$' |
        sed -e 's/^/* /' -e 's/.md$//'
}

new() {
    if [[ -f "$1.md" ]]; then
        echo "ERROR: Name *$1* already exists ..."
        return "$name_already_exists"
    elif echo "$1" | grep -Ev '^[[:alnum:]]+$' > /dev/null; then
        echo "ERROR: Name *$1* is not alphanumeric ..."
        return "$name_not_alphanumeric"
    fi

    echo > "$1.md"
    echo "$1" | tr [:lower:] [:upper:] >> "$1.md"
    head --bytes=${#1} < /dev/zero | tr '\0' '=' >> "$1.md"
    echo -e "\n" >> "$1.md"

    echo "Created *$1*!"
}

open() {
    if ! [ -f "$1.md" ]; then
        echo "ERROR: Name *$1* does not exist ..."
        return "$name_doesnt_exist"
    fi

    vim "$1.md"
    clear
    cat "$1.md"
}

rename() {
    if ! [ -f "$1.md" ]; then
        echo "ERROR: Name *$1* does not exist ..."
        return "$name_doesnt_exist"
    elif [[ -f "$2.md" ]]; then
        echo "ERROR: Name *$2* already exists ..."
        return "$name_already_exists"
    elif echo "$2" | grep -Ev '^[[:alnum:]]+$' > /dev/null; then
        echo "ERROR: Name *$2* is not alphanumeric ..."
        return "$name_not_alphanumeric"
    fi

    mv $1.md $2.md
    old_title=$(echo $1 | tr [:lower:] [:upper:])
    old_underline=$(head --bytes="${#old_title}" < /dev/zero | tr '\0' '=')
    if
        (sed -n -e '2p' "$2.md" | grep "^$old_title$" > /dev/null) &&
        (sed -n -e '3p' "$2.md" | grep "^$old_underline$" > /dev/null)
    then
        new_title=$(echo $2 | tr [:lower:] [:upper:])
        new_underline=$(head --bytes="${#new_title}" < /dev/zero | tr '\0' '=')
        sed -i -e "2 s/^$old_title$/$new_title/" "$2.md"
        sed -i -e "3 s/^$old_underline$/$new_underline/" "$2.md"
    fi

    echo "*$1* renamed to *$2*!"
}

show() {
    if ! [ -f "$1.md" ]; then
        echo "ERROR: Name *$1* does not exist ..."
        return "$name_doesnt_exist"
    fi

    clear
    cat "$1.md"
}


initial_dir=$(pwd)
todos_dir=~/bin/.todos/
[ -d "$todos_dir" ] || mkdir $todos_dir
default_name=todo
[ -f "$todos_dir/$default_name.md" ] || touch $todos_dir/$default_name.md


args_from_input() {
	case $# in
		0)
			flag=--open
            name=$default_name
			;;

		1)
            case $1 in
                -h | --help )
                    flag=--help
                    name=''
                    ;;

                -l | --list )
                    flag=--list
                    name=''
                    ;;

                -o | --open )
                    flag=--open
                    name=$default_name
                    ;;

                -s | --show )
                    flag=--show
                    name=$default_name
                    ;;

                *)
                    return "$invalid_syntax"
                    ;;
            esac
			;;

		2)
			if [[ " ${options[*]} " == *" $1 "* ]]; then
				flag=$1
				name=$2
			else
				return "$invalid_syntax"
			fi
			;;

        3)
            if [ "$1" = "-r" ] || [ "$1" = "--rename" ]; then
                flag=--rename
                name=$2
                name2=$3
            else
                return "$invalid_syntax"
            fi
            ;;

		*)
			return "$invalid_syntax"
			;;
	esac
	printf -- "$flag $name $name2"
}

manage_todos() {
    cd "$todos_dir"

    case $1 in
        -d | --delete )
            delete $2
            exit_code=$?
            ;;

        -h | --help )
            usage
            exit_code=$?
            ;;

        -l | --list )
            list
            exit_code=$?
            ;;

        -n | --new )
            new $2
            exit_code=$?
            ;;

        -o | --open )
            open $2
            exit_code=$?
            ;;

        -r | --rename )
            rename $2 $3
            exit_code=$?
            ;;

        -s | --show )
            show $2
            exit_code=$?
            ;;
    esac

    cd "$initial_dir"
    return "$exit_code"
}


if args=$(args_from_input "$@"); then
    manage_todos $args
else
    cat << EOF
Invalid syntax ...
Try 'todo --help' for more information.
EOF
    (exit "$invalid_syntax")
fi

